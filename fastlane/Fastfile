update_fastlane

desc "Run bundle install and tests"
lane :test do
  validate_repo
end

desc "Does everything that's needed for a release, this includes running tests and verifying the GitHub release"
lane :release do |options|
  tool_name = "danger"

  # Verifying RubyGems version
  #
  validate_repo

  require "../lib/#{tool_name}/version"
  version = Danger::VERSION
  old_version = current_version(tool: tool_name)
  puts "Deploying #{tool_name} #{version}"
  if Gem::Version.new(version) <= Gem::Version.new(old_version)
    raise "Version number #{version} was already deployed"
  end

  # Git verification
  #
  ensure_git_status_clean
  ensure_git_branch(branch: 'master')
  git_pull
  push_to_git_remote

  # Preparing GitHub Release
  #
  github_release = get_github_release(url: github_url, version: version)
  if (github_release || {}).fetch('body', '').empty?
    `open https://github.com/#{github_url}/compare/#{old_version}...master`

    title = prompt(text: 'Title: ')
    description = prompt(text: "Please enter a changelog: ",
                         multi_line_end_keyword: "END")

    github_release = set_github_release(
      repository_name: github_url,
      name: [version, title].join(" "),
      tag_name: version,
      description: description,
      is_draft: false
    )
  end

  # Actual release
  #
  sh "gem push ../pkg/#{tool_name}-#{version}.gem"

  release_url = github_release['html_url']

  clipboard(value: release_url)

  puts "You can now tweet:".green
  puts "[#{tool_name}] #{github_release['name']} #{release_url}"
end

desc "Verifies all tests pass and the current state of the repo is valid"
private_lane :validate_repo do
  tool_name = "danger"

  # Verifying that no debug code is in the code base
  #
  ensure_no_debug_code(text: "pry", extension: ".rb", path: "./lib/") # debugging code
  ensure_no_debug_code(text: "TODO", extension: ".rb", path: "./lib/") # TODOs
  ensure_no_debug_code(text: "now: ", extension: ".rb", path: "./lib/") # rspec focus
  ensure_no_debug_code(text: "<<<<<<<", extension: ".rb", path: "./lib/") # Merge conflict

  rubocop if File.exist?("../.rubocop.yml") # some project don't yet use rubocop

  # Verifying the --help command
  #
  binary_path = File.join("..", "bin", tool_name)
  content = sh "#{binary_path} --help"
  ["--version", tool_name].each do |current|
    raise "--help missing information: '#{current}'" unless content.include? current
  end

  # Running ruby things
  #
  sh "cd .. && bundle install"
  sh "cd .. && rake install"

  # Run the tests
  #
  sh "cd .. && bundle exec rspec"
end

private_lane :github_url do
  ["danger", "danger"].join("/")
end

desc "Get the version number of the last release"
private_lane :current_version do |options|
  puts "Checking the latest version on RubyGems"
  download(url: "https://rubygems.org/api/v1/gems/#{options[:tool]}.json")["version"]
end
